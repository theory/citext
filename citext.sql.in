--
--  PostgreSQL code for CITEXT.
--

-- Adjust this setting to control where the objects get created.
SET search_path = public;
--SET client_min_messages = warning;

--
--  Input and output functions.
--

CREATE OR REPLACE FUNCTION citextin(cstring)
RETURNS citext
AS 'textin'
LANGUAGE 'internal' IMMUTABLE STRICT;
GRANT EXECUTE ON FUNCTION citextin(cstring) TO PUBLIC;
COMMENT ON FUNCTION citextin(cstring) IS 'Input for locale-aware case-insensitive text';

CREATE OR REPLACE FUNCTION citextout(citext)
RETURNS cstring
AS 'textout'
LANGUAGE 'internal' IMMUTABLE STRICT;

GRANT EXECUTE ON FUNCTION citextout(citext) TO PUBLIC;
COMMENT ON FUNCTION citextout(citext) IS 'Output for locale-aware case-insensitive text';

--
--  The type itself.
--

CREATE TYPE citext (
    INPUT          = citextin,
    OUTPUT         = citextout,
    INTERNALLENGTH = VARIABLE
);

COMMENT ON TYPE citext IS 'Variable-length, locale-aware, case-insensitive text';

--
--  Implicit and assignment type casts.
--

CREATE CAST (citext AS text)    WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (citext AS varchar) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (citext AS bpchar)  WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (text AS citext)    WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (varchar AS citext) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (bpchar AS citext)  WITHOUT FUNCTION AS ASSIGNMENT;

--
-- Operator Functions.
--

CREATE OR REPLACE FUNCTION citext_eq( citext, citext )
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION citext_ne( citext, citext )
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION citext_lt( citext, citext )
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION citext_le( citext, citext )
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION citext_gt( citext, citext )
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION citext_ge( citext, citext )
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION textcat(citext, citext)
RETURNS citext
AS 'textcat'
LANGUAGE 'internal' IMMUTABLE STRICT;

--
-- Operators.
--

CREATE OPERATOR = (
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,
    COMMUTATOR = =,
    NEGATOR    = <>,
    PROCEDURE  = citext_eq
);

CREATE OPERATOR <> (
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,
    NEGATOR    = =,
    COMMUTATOR = <>,
    PROCEDURE  = citext_ne
);

CREATE OPERATOR < (
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,
    NEGATOR    = >=,
    COMMUTATOR = >,
    PROCEDURE  = citext_lt
);

CREATE OPERATOR <= (
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,
    NEGATOR    = >,
    COMMUTATOR = <=,
    PROCEDURE  = citext_le
);

CREATE OPERATOR >= (
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,
    NEGATOR    = <,
    COMMUTATOR = <=,
    PROCEDURE  = citext_ge
);

CREATE OPERATOR > (
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,
    NEGATOR    = <=,
    COMMUTATOR = <,
    PROCEDURE  = citext_gt
);


CREATE OPERATOR || (
    LEFTARG   = CITEXT,
    RIGHTARG  = CITEXT,
    PROCEDURE = textcat
);

--
-- Comparison functions for indexing.
--

CREATE FUNCTION citext_cmp(CITEXT, CITEXT)
RETURNS INT
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE FUNCTION citext_smaller(citext, citext)
RETURNS citext
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE FUNCTION citext_larger(citext, citext)
RETURNS citext
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE FUNCTION citext_hash(citext)
RETURNS int4
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE RETURNS NULL ON NULL INPUT;

--
-- The btree indexing operator class.
--

CREATE OPERATOR CLASS citext_ops
DEFAULT FOR TYPE CITEXT USING btree AS
    OPERATOR    1   <  (citext, citext),
    OPERATOR    2   <= (citext, citext),
    OPERATOR    3   =  (citext, citext),
    OPERATOR    4   >= (citext, citext),
    OPERATOR    5   >  (citext, citext),
    FUNCTION    1   citext_cmp(citext, citext);

--
-- The hash indexing operator class.
--

CREATE OPERATOR CLASS citext_ops
DEFAULT FOR TYPE citext USING hash AS
    OPERATOR    1   =  (citext, citext),
    FUNCTION    1   citext_hash(citext);

--
-- Aggregates.
--

CREATE AGGREGATE max(BASETYPE=citext, SFUNC=citext_larger,  STYPE=citext);
CREATE AGGREGATE min(BASETYPE=citext, SFUNC=citext_smaller, STYPE=citext);

--
-- Size functions
--

CREATE FUNCTION textlen(citext)
RETURNS int4 AS 'textlen'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION length(citext)
RETURNS int4 AS 'textlen'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION char_length(citext)
RETURNS int4 AS 'textlen'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION character_length(citext)
RETURNS int4 AS 'textlen'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION octet_length(citext)
RETURNS int4 AS 'textoctetlen'
LANGUAGE 'internal' IMMUTABLE STRICT;

--
-- Miscelaneous functions
--

CREATE FUNCTION lower(citext)
RETURNS citext AS 'lower'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION upper(citext)
RETURNS citext AS 'upper'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION btrim(citext, citext)
RETURNS citext AS 'btrim'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION btrim(citext)
RETURNS citext AS 'select btrim($1, '' ''::citext)'
LANGUAGE 'sql' IMMUTABLE STRICT;

CREATE FUNCTION ltrim(citext, citext)
RETURNS citext AS 'ltrim'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION ltrim(citext)
RETURNS citext AS 'select ltrim($1, '' ''::citext)'
LANGUAGE 'sql' IMMUTABLE STRICT;

CREATE FUNCTION rtrim(citext, citext)
RETURNS citext AS 'rtrim'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION rtrim(citext)
RETURNS citext AS 'select rtrim($1, '' ''::citext)'
LANGUAGE 'sql' IMMUTABLE STRICT;

CREATE FUNCTION lpad(citext, int4, citext)
RETURNS citext AS 'lpad'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION lpad(citext, int4)
RETURNS citext AS 'select lpad($1, $2, '' '')'
LANGUAGE 'sql' IMMUTABLE STRICT;

CREATE FUNCTION rpad(citext, int4, citext)
RETURNS citext AS 'rpad'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION rpad(citext, int4)
RETURNS citext AS 'select rpad($1, $2, '' ''::citext)'
LANGUAGE 'sql' IMMUTABLE STRICT;

CREATE FUNCTION repeat(citext, int4)
RETURNS citext AS 'repeat'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION "substring"(citext, int4, int4)
RETURNS citext AS 'text_substr'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION "substring"(citext, int4)
RETURNS citext AS 'text_substr_no_len'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION substr(citext, int4, int4)
RETURNS citext AS 'text_substr'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION substr(citext, int4)
RETURNS citext AS 'text_substr_no_len'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_timestamp(citext, citext)
RETURNS timestamptz AS 'to_timestamp'
LANGUAGE 'internal' STABLE STRICT;

CREATE FUNCTION to_number(citext, citext)
RETURNS "numeric" AS 'numeric_to_number'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_date(citext, citext)
RETURNS "date" AS 'to_date'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char("interval", citext)
RETURNS citext AS 'interval_to_char'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char(float8, citext)
RETURNS citext AS 'float8_to_char'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char(float4, citext)
RETURNS citext AS 'float4_to_char'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char(int8, citext)
RETURNS citext AS 'int8_to_char'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char(int4, citext)
RETURNS citext AS 'int4_to_char'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char(numeric, citext)
RETURNS citext AS 'numeric_to_char'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_char(timestamptz, citext)
RETURNS citext AS 'timestamptz_to_char'
LANGUAGE 'internal' STABLE STRICT;

CREATE FUNCTION to_char("timestamp", citext)
RETURNS citext AS 'timestamp_to_char'
LANGUAGE 'internal' STABLE STRICT;

CREATE FUNCTION to_ascii(citext, name)
RETURNS citext AS 'to_ascii_encname'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_ascii(citext, int4)
RETURNS citext AS 'to_ascii_enc'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION to_ascii(citext)
RETURNS citext AS 'to_ascii_default'
LANGUAGE 'internal' IMMUTABLE STRICT;

--
-- Matching citext to citext. 
--

CREATE FUNCTION texticlike(citext, citext)
RETURNS bool AS 'texticlike'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION texticnlike(citext, citext)
RETURNS bool AS 'texticnlike'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION texticregexeq(citext, citext)
RETURNS bool AS 'texticregexeq'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION texticregexne(citext, citext)
RETURNS bool AS 'texticregexne'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION quote_literal(citext)
RETURNS text AS 'quote_literal'
LANGUAGE 'internal' IMMUTABLE STRICT;

-- regular expression Operators citext : citext
CREATE OPERATOR ~ (
    PROCEDURE = texticregexeq,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(!~),
    RESTRICT  = icregexeqsel,
    JOIN      = icregexeqjoinsel
);

CREATE OPERATOR ~* (
    PROCEDURE = texticregexeq,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(!~*),
    RESTRICT  = icregexeqsel,
    JOIN      = icregexeqjoinsel
);

CREATE OPERATOR !~ (
    PROCEDURE = texticregexne,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(~),
    RESTRICT  = icregexnesel,
    JOIN      = icregexnejoinsel
);

CREATE OPERATOR !~* (
    PROCEDURE = texticregexne,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(~*),
    RESTRICT  = icregexnesel,
    JOIN      = icregexnejoinsel
);

CREATE OPERATOR ~~ (
    PROCEDURE = texticlike,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(!~~),
    RESTRICT  = iclikesel,
    JOIN      = iclikejoinsel
);

CREATE OPERATOR ~~* (
    PROCEDURE = texticlike,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(!~~*),
    RESTRICT  = iclikesel,
    JOIN      = iclikejoinsel
);

CREATE OPERATOR !~~ (
    PROCEDURE = texticnlike,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(~~),
    RESTRICT  = icnlikesel,
    JOIN      = icnlikejoinsel
);

CREATE OPERATOR !~~* (
    PROCEDURE = texticnlike,
    LEFTARG   = citext,
    RIGHTARG  = citext,
    NEGATOR   = OPERATOR(~~*),
    RESTRICT  = icnlikesel,
    JOIN      = icnlikejoinsel
);

--
-- Matching citext to text. 
--

CREATE FUNCTION texticlike(citext, text)
RETURNS bool AS 'texticlike'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION texticnlike(citext, text)
RETURNS bool AS 'texticnlike'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION texticregexeq(citext, text)
RETURNS bool AS 'texticregexeq'
LANGUAGE 'internal' IMMUTABLE STRICT;

CREATE FUNCTION texticregexne(citext, text)
RETURNS bool AS 'texticregexne'
LANGUAGE 'internal' IMMUTABLE STRICT;

-- regular expression Operators citext : text
CREATE OPERATOR ~ (
    PROCEDURE = texticregexeq,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(!~),
    RESTRICT  = icregexeqsel,
    JOIN      = icregexeqjoinsel
);

CREATE OPERATOR ~* (
    PROCEDURE = texticregexeq,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(!~*),
    RESTRICT  = icregexeqsel,
    JOIN      = icregexeqjoinsel
);

CREATE OPERATOR !~ (
    PROCEDURE = texticregexne,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(~),
    RESTRICT  = icregexnesel,
    JOIN      = icregexnejoinsel
);

CREATE OPERATOR !~* (
    PROCEDURE = texticregexne,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(~*),
    RESTRICT  = icregexnesel,
    JOIN      = icregexnejoinsel
);

CREATE OPERATOR ~~ (
    PROCEDURE = texticlike,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(!~~),
    RESTRICT  = iclikesel,
    JOIN      = iclikejoinsel
);

CREATE OPERATOR ~~* (
    PROCEDURE = texticlike,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(!~~*),
    RESTRICT  = iclikesel,
    JOIN      = iclikejoinsel
);

CREATE OPERATOR !~~ (
    PROCEDURE = texticnlike,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(~~),
    RESTRICT  = icnlikesel,
    JOIN      = icnlikejoinsel
);

CREATE OPERATOR !~~* (
    PROCEDURE = texticnlike,
    LEFTARG   = citext,
    RIGHTARG  = text,
    NEGATOR   = OPERATOR(~~*),
    RESTRICT  = icnlikesel,
    JOIN      = icnlikejoinsel
);


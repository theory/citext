\set ECHO none
1..339
ok 1 - citext "a" should  eq   citext "a"
ok 2 - citext "a" should  eq   citext "A"
ok 3 - citext "a" should  ne   citext "b"
ok 4 - citext "À" should  eq   citext "À"
ok 5 - text   "À" should  ne   text   "À"
ok 6 - citext "À" should  eq   citext "à"
ok 7 - text   "À" should  ne   text   "à"
ok 8 - citext "À" should  ne   text   "B"
ok 9 - text   "B" should be lt text   "a"
ok 10 - text   "B" should be le text   "a"
ok 11 - citext "B" should be gt citext "a"
ok 12 - citext "B" should be ge citext "a"
ok 13 - text   "Á" should be lt text   "à"
ok 14 - text   "Á" should be le text   "à"
ok 15 - citext "Á" should be gt citext "à"
ok 16 - citext "Á" should be ge citext "à"
ok 17 - text   "a" should be gt text   "B"
ok 18 - text   "a" should be ge text   "B"
ok 19 - citext "a" should be lt citext "B"
ok 20 - citext "B" should be le citext "B"
ok 21 - text   "à" should be gt text   "Á"
ok 22 - text   "à" should be ge text   "Á"
ok 23 - citext "à" should be lt citext "Á"
ok 24 - citext "à" should be le citext "Á"
ok 25 - citext "a" should eq text "a"
ok 26 - citext "A" should eq text "a"
ok 27 - citext "À" should eq text "À"
ok 28 - citext "À" should eq text "à"
ok 29 - citext "a" should ne text "b"
ok 30 - citext "À" should ne text "B"
ok 31 - citext "a" should = text "a"
ok 32 - citext "A" should = text "a"
ok 33 - citext "À" should = text "À"
ok 34 - citext "À" should = text "à"
ok 35 - citext "a" should <> text "b"
ok 36 - citext "À" should <> text "B"
ok 37 - text "a" should eq citext "a"
ok 38 - text "A" should eq citext "a"
ok 39 - text "À" should eq citext "À"
ok 40 - text "À" should eq citext "à"
ok 41 - text "a" should ne citext "b"
ok 42 - text "À" should ne citext "B"
ok 43 - text "a" should eq citext "a"
ok 44 - text "a" should eq citext "a"
ok 45 - text "À" should eq citext "À"
ok 46 - text "à" should eq citext "À"
ok 47 - text "b" should ne citext "a"
ok 48 - text "B" should ne citext "À"
ok 49 - citext "B" should be gt text "a"
ok 50 - citext "B" should be ge text "a"
ok 51 - citext "Á" should be gt text "à"
ok 52 - citext "Á" should be ge text "à"
ok 53 - text "B" should be gt citext "a"
ok 54 - text "B" should be ge citext "a"
ok 55 - text "Á" should be gt citext "à"
ok 56 - text "Á" should be ge citext "à"
ok 57 - citext "a" should be lt text "B"
ok 58 - citext "B" should be le text "B"
ok 59 - citext "à" should be lt text "Á"
ok 60 - citext "à" should be le text "Á"
ok 61 - text "a" should be lt citext "B"
ok 62 - text "B" should be le citext "B"
ok 63 - text "à" should be lt citext "Á"
ok 64 - text "à" should be le citext "Á"
ok 65 - Combining text characters are not equivalent
ok 66 - Combining citext characters are not equivalent
ok 67 - citext "a" should =  text "a"
ok 68 - citext "A" should <> text "a"
ok 69 - citext "À" should =  text "À"
ok 70 - citext "À" should <  text "à"
ok 71 - citext "a" should <> text "b"
ok 72 - citext "À" should <> text "B"
ok 73 - text "a" should =  citext "a"
ok 74 - text "A" should <> citext "a"
ok 75 - text "À" should =  citext "À"
ok 76 - text "À" should <  citext "à"
ok 77 - text "a" should <> citext "b"
ok 78 - text "À" should <> citext "B"
ok 79 - citext "aardvark" should  eq   citext "aardvark"
ok 80 - citext "AARDVARK" should  eq   citext "AARDVARK"
ok 81 - citext "aardvark" should  eq   citext "AARDVARK"
ok 82 - "Ask Bjørn Hansen" should eq "Ask Bjørn Hansen"
ok 83 - "Ask Bjørn Hansen" should eq "ASK BJØRN HANSEN"
ok 84 - "ask bjørn hansen" should eq "ASK BJØRN HANSEN"
ok 85 - "Ask Bjørn Hansen" should ne "Ask Bjorn Hansen"
ok 86 - "Ask Bjørn Hansen" should ne "ASK BJORN HANSEN"
ok 87 - "ask bjørn hansen" should ne "ASK BJORN HANSEN"
ok 88 - citext_cmp( citext "aardvark", citext "aardvark") should be 0
ok 89 - citext_cmp( citext "aardvark", citext "AARDVARK") should be 0
ok 90 - citext_cmp( citext "AARDVARK", citext "AARDVARK") should be 0
ok 91 - citext_cmp( "Ask Bjørn Hansen", "Ask Bjørn Hansen") should be 0
ok 92 - citext_cmp( "Ask Bjørn Hansen", "ask bjørn hansen") should be 0
ok 93 - citext_cmp( "Ask Bjørn Hansen", "ASK BJØRN HANSEN") should be 0
ok 94 - citext_cmp( "Ask Bjørn Hansen", "Ask Bjorn Hansen") should be -1
ok 95 - citext_cmp( "Ask Bjorn Hansen", "Ask Bjørn Hansen") should be 1
ok 96 - We should be able to select the value
ok 97 - We should be able to select the value in uppercase
ok 98 - We should be able to select an accented value
ok 99 - We should be able to select an accented value in uppercase
ok 100 - We should get an error inserting a lowercase letter
ok 101 - We should get an error inserting an uppercase letter
ok 102 - We should get an error inserting a lowercase accented letter
ok 103 - We should get an error inserting an uppercase accented letter
ok 104 - "aa" should be smaller
ok 105 - "Â" should be smaller
ok 106 - "AAAA" should be smaller
ok 107 - "Aaba" should be smaller
ok 108 - "AARDVARK" should be smaller
ok 109 - "ab" should be larger
ok 110 - "ç" should be larger
ok 111 - "bbbb" should be larger
ok 112 - "aardvark" should be smaller
ok 113 - The min::text value should be "AAA"
ok 114 - The max::text value should be "ç"
ok 115 - The min value should be "AAA"
ok 116 - The max value should be "ç"
ok 117 - The words should be case-insensitively sorted
ok 118 - The words should be case-insensitively sorted (citext array)
ok 119 - The UPPER(words) should be case-insensitively sorted
ok 120 - The UPPER(words) should be case-insensitively sorted (citext array)
ok 121 - The UPPER(words) should case-insensitively compare
ok 122 - The UPPER(words) should be case-insensitively sorted
ok 123 - The UPPER(words) should be case-insensitively sorted (citext array)
ok 124 - The LOWER(words) should case-insensitively compare
ok 125 - LOWER("AAA") should return "aaa"
ok 126 - UPPER("â") should return "Â"
ok 127 - LOWER("AAA") should return "aaa"
ok 128 - UPPER("â") should return "Â"
ok 129 - LOWER("AAA") should return "aaa"
ok 130 - UPPER("â") should return "Â"
ok 131 - LIKE should work properly
ok 132 - LIKE should work case-insensitively
ok 133 - ILIKE should work properly
ok 134 - NOT LIKE should work properly
ok 135 - NOT LIKE should work properly and case-insensitively
ok 136 - NOT ILIKE should work properly
ok 137 - ~~ should work properly
ok 138 - ~~ should work case-insensitively
ok 139 - ~~* should work properly
ok 140 - !~~ should work properly
ok 141 - !~~ should work properly and case-insensitively
ok 142 - !~~* should work properly and case-insensitively
ok 143 - ~ should work properly
ok 144 - ~ should work case-insensitively
ok 145 - ~* should work properly
ok 146 - !~ should work properly
ok 147 - !~ should work properly and case-insensitively
ok 148 - !~* should work properly and case-insensitively
ok 149 - varchar LIKE should work properly
ok 150 - varchar ILIKE should work properly
ok 151 - varchar NOT LIKE should work properly
ok 152 - text LIKE should work properly
ok 153 - text ILIKE should work properly
ok 154 - text NOT LIKE should work properly
ok 155 - text LIKE should work properly
ok 156 - text ILIKE should work properly
ok 157 - text NOT LIKE should work properly
ok 158 - varchar LIKE should work properly
ok 159 - varchar ILIKE should work properly
ok 160 - varchar NOT LIKE should work properly
ok 161 - name LIKE should work properly
ok 162 - name ILIKE should work properly
ok 163 - name NOT LIKE should work properly
ok 164 - bpchar LIKE should work properly
ok 165 - bpchar ILIKE should work properly
ok 166 - bpchar NOT LIKE should work properly
ok 167 - char LIKE should work properly
ok 168 - char ILIKE should work properly
ok 169 - char NOT LIKE should work properly
ok 170 - SIMILAR TO should work properly
ok 171 - citext || citext should work
ok 172 - citext || int should work
ok 173 - citext || int should work
ok 174 - bit_length(citext) should work
ok 175 - bit_length("aardvark") should be correct
ok 176 - bit_length("AAA") should be correct
ok 177 - bit_length("aba") should be correct
ok 178 - bit_length("ABC") should be correct
ok 179 - bit_length("abc") should be correct
ok 180 - bit_length("ç") should be correct
ok 181 - bit_length("â") should be correct
ok 182 - textlen("aardvark") should be correct
ok 183 - textlen("AAA") should be correct
ok 184 - textlen("aba") should be correct
ok 185 - textlen("ABC") should be correct
ok 186 - textlen("abc") should be correct
ok 187 - textlen("ç") should be correct
ok 188 - textlen("â") should be correct
ok 189 - char_length("aardvark") should be correct
ok 190 - char_length("AAA") should be correct
ok 191 - char_length("aba") should be correct
ok 192 - char_length("ABC") should be correct
ok 193 - char_length("abc") should be correct
ok 194 - char_length("ç") should be correct
ok 195 - char_length("â") should be correct
ok 196 - character_length("aardvark") should be correct
ok 197 - character_length("AAA") should be correct
ok 198 - character_length("aba") should be correct
ok 199 - character_length("ABC") should be correct
ok 200 - character_length("abc") should be correct
ok 201 - character_length("ç") should be correct
ok 202 - character_length("â") should be correct
ok 203 - LOWER("aardvark") should be correct
ok 204 - LOWER("AAA") should be correct
ok 205 - LOWER("aba") should be correct
ok 206 - LOWER("ABC") should be correct
ok 207 - LOWER("abc") should be correct
ok 208 - LOWER("ç") should be correct
ok 209 - LOWER("â") should be correct
ok 210 - octet_length(citext) should work
ok 211 - octet_length("aardvark") should be correct
ok 212 - octet_length("AAA") should be correct
ok 213 - octet_length("aba") should be correct
ok 214 - octet_length("ABC") should be correct
ok 215 - octet_length("abc") should be correct
ok 216 - octet_length("ç") should be correct
ok 217 - octet_length("â") should be correct
ok 218 - overlay() should work
ok 219 - overlay() should work
ok 220 - overlay() should work
ok 221 - overlay() should work
ok 222 - overlay() should work
ok 223 - overlay() should work
ok 224 - overlay() should work
ok 225 - position() should work
ok 226 - position() should work
ok 227 - position() should work
ok 228 - position() should work
ok 229 - position() should work
ok 230 - position() should work
ok 231 - position() should work
ok 232 - subtr(citext, int) should work
ok 233 - subtr(citext, int) should work
ok 234 - subtr(citext, int) should work
ok 235 - subtr(citext, int, int) should work
ok 236 - subtr(citext from int for int) should work
ok 237 - subtr(citext from int) should work
ok 238 - subtr(citext from regex) should work
ok 239 - subtr(citext from regex for escape) should work
ok 240 - trim(citext) should work
ok 241 - trim(citext, citext) should work
ok 242 - trim(text, citext) should work
ok 243 - trim(citext, text) should work
ok 244 - UPPER("aardvark") should be correct
ok 245 - UPPER("AAA") should be correct
ok 246 - UPPER("aba") should be correct
ok 247 - UPPER("ABC") should be correct
ok 248 - UPPER("abc") should be correct
ok 249 - UPPER("ç") should be correct
ok 250 - UPPER("â") should be correct
ok 251 - ascii(aardvark) should work properly
ok 252 - ascii(AAA) should work properly
ok 253 - ascii(aba) should work properly
ok 254 - ascii(ABC) should work properly
ok 255 - ascii(abc) should work properly
ok 256 - ascii(ç) should work properly
ok 257 - ascii(â) should work properly
ok 258 - btrim(citext) should work
ok 259 - btrim(citext, citext) should work
ok 260 - btrim(text, citext) should work
ok 261 - btrim(citext, text) should work
ok 262 - convert_to() should work the same as for text
ok 263 - convert_to() should work the same as for text
ok 264 - convert_to() should work the same as for text
ok 265 - convert_to() should work the same as for text
ok 266 - convert_to() should work the same as for text
ok 267 - convert_to() should work the same as for text
ok 268 - convert_to() should work the same as for text
ok 269 - decode() should work the same as for text
ok 270 - initcap() whould work as for text
ok 271 - initcap() whould work as for text on all rows
ok 272 - initcap() whould work as for text on all rows
ok 273 - initcap() whould work as for text on all rows
ok 274 - initcap() whould work as for text on all rows
ok 275 - initcap() whould work as for text on all rows
ok 276 - initcap() whould work as for text on all rows
ok 277 - initcap() whould work as for text on all rows
ok 278 - length("aardvark") should be correct
ok 279 - length("AAA") should be correct
ok 280 - length("aba") should be correct
ok 281 - length("ABC") should be correct
ok 282 - length("abc") should be correct
ok 283 - length("ç") should be correct
ok 284 - length("â") should be correct
ok 285 - lpad(citext, int) should work
ok 286 - lpad(citext, int, citext) should work
ok 287 - lpad(text, int, citext) should work
ok 288 - lpad(citext, int, text) should work
ok 289 - ltrim(citext) should work
ok 290 - ltrim(citext, citext) should work
ok 291 - ltrim(text, citext) should work
ok 292 - ltrim(citext, text) should work
ok 293 - md5() should work as for text
ok 294 - md5() should work as for text
ok 295 - md5() should work as for text
ok 296 - md5() should work as for text
ok 297 - md5() should work as for text
ok 298 - md5() should work as for text
ok 299 - md5() should work as for text
ok 300 - quote_ident() should work as for text
ok 301 - quote_ident() should work as for text
ok 302 - quote_ident() should work as for text
ok 303 - quote_ident() should work as for text
ok 304 - quote_ident() should work as for text
ok 305 - quote_ident() should work as for text
ok 306 - quote_ident() should work as for text
ok 307 - quote_literal() should work as for text
ok 308 - quote_literal() should work as for text
ok 309 - quote_literal() should work as for text
ok 310 - quote_literal() should work as for text
ok 311 - quote_literal() should work as for text
ok 312 - quote_literal() should work as for text
ok 313 - quote_literal() should work as for text
ok 314 - regexp_matches() should work
ok 315 - regexp_replace() should work
not ok 316 - regexp_replace() should work case-insensitively # TODO XXX Case-insensitive support missing
# Failed (TODO) test 316: "regexp_replace() should work case-insensitively"
#          got: Thomas
#     expected: ThM
ok 317 - regexp_split_to_array() should work
not ok 318 - regexp_split_to_array() should work case-insensitively # TODO XXX Case-insensitive support missing
# Failed (TODO) test 318: "regexp_split_to_array() should work case-insensitively"
#          got: {helloTworld}
#     expected: {hello,world}
ok 319 - regexp_split_to_table() should work
not ok 320 - regexp_split_to_table() should work case-insensitively # TODO XXX Case-insensitive support missing
# Failed (TODO) test 320: "regexp_split_to_table() should work case-insensitively"
#          got: {helloTworld}
#     expected: {hello,world}
ok 321 - repeat(citext, int) should work
ok 322 - replace() should work
not ok 323 - replace() should work case-insensitvely # TODO XXX Case-insensitive support missing
# Failed (TODO) test 323: "replace() should work case-insensitvely"
#          got: abcdefabcdef
#     expected: abXXefabXXef
ok 324 - rpad(citext, int) should work
ok 325 - rpad(citext, int, citext) should work
ok 326 - rpad(text, int, citext) should work
ok 327 - rpad(citext, int, text) should work
ok 328 - rtrim(citext) should work
ok 329 - rtrim(citext, citext) should work
ok 330 - rtrim(text, citext) should work
ok 331 - rtrim(citext, text) should work
ok 332 - split_part() should work
not ok 333 - split_part() should work case-insensitively # TODO XXX Case-insensitive support missing
# Failed (TODO) test 333: "split_part() should work case-insensitively"
#          got: 
#     expected: def
ok 334 - strpos(citext, text) should work
ok 335 - strpos(citext, citext) should work
not ok 336 - strpos(citext, citext) should work case-insensitively # TODO XXX Case-insensitive support missing
# Failed (TODO) test 336: "strpos(citext, citext) should work case-insensitively"
#          got: 0
#     expected: 2
ok 337 - substr() should work
ok 338 - translate() should work
not ok 339 - translate() should work case-insensitvely # TODO XXX Case-insensitive support missing
# Failed (TODO) test 339: "translate() should work case-insensitvely"
#          got: abcdefabcdef
#     expected: abXXefabXXef
